import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

interface Birthday {
  id: string;
  name: string;
  date: string; // —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD
}

export function BirthdaySidebar({ open, onOpenChange }: { open: boolean; onOpenChange: (open: boolean) => void }) {
  const [birthdays, setBirthdays] = useState<Birthday[]>([]);
  const [newName, setNewName] = useState('');
  const [newDate, setNewDate] = useState('');
  const [editingId, setEditingId] = useState<string | null>(null);
  const [sortByDate, setSortByDate] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ localStorage
  useEffect(() => {
    const storedBirthdays = localStorage.getItem('birthday');
    if (storedBirthdays) {
      setBirthdays(JSON.parse(storedBirthdays));
    }
  }, [open]);

  // –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞
  const calculateAge = (birthDate: string): number => {
    const today = new Date();
    const [birthYear, birthMonth, birthDay] = birthDate.split('-');
    
    let age = today.getFullYear() - parseInt(birthYear);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É
    const hasBirthdayOccurredThisYear = (
      today.getMonth() + 1 > parseInt(birthMonth) || 
      (today.getMonth() + 1 === parseInt(birthMonth) && today.getDate() >= parseInt(birthDay))
    );
    
    // –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª, –≤—ã—á–∏—Ç–∞–µ–º 1 –≥–æ–¥
    if (!hasBirthdayOccurredThisYear) {
      age--;
    }
    
    return age;
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ localStorage
  const saveBirthdays = (updatedBirthdays: Birthday[]) => {
    localStorage.setItem('birthday', JSON.stringify(updatedBirthdays));
    setBirthdays(updatedBirthdays);
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
  const addBirthday = () => {
    if (newName.trim() && newDate) {
      if (editingId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        const updated = birthdays.map(b => 
          b.id === editingId ? { ...b, name: newName, date: newDate } : b
        );
        saveBirthdays(updated);
        setEditingId(null);
      } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
        const newBirthday: Birthday = {
          id: Date.now().toString(),
          name: newName,
          date: newDate
        };
        saveBirthdays([...birthdays, newBirthday]);
      }
      setNewName('');
      setNewDate('');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
  const deleteBirthday = (id: string) => {
    const updated = birthdays.filter(b => b.id !== id);
    saveBirthdays(updated);
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
  const editBirthday = (birthday: Birthday) => {
    setNewName(birthday.name);
    setNewDate(birthday.date);
    setEditingId(birthday.id);
  };

 // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
 const sortedBirthdays = [...birthdays].sort((a, b) => {
    if (sortByDate) {
      const today = new Date();
      const [monthA, dayA] = a.date.split('-');
      const [monthB, dayB] = b.date.split('-');
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—ã –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
      const birthdayA = new Date(
        today.getFullYear(),
        parseInt(monthA) - 1,
        parseInt(dayA)
      );
      
      const birthdayB = new Date(
        today.getFullYear(),
        parseInt(monthB) - 1,
        parseInt(dayB)
      );
      
      // –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
      if (birthdayA < today) {
        birthdayA.setFullYear(today.getFullYear() + 1);
      }
      
      if (birthdayB < today) {
        birthdayB.setFullYear(today.getFullYear() + 1);
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è)
      return birthdayA.getTime() - birthdayB.getTime();
    } else {
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
      return a.name.localeCompare(b.name);
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–∫–æ—Ä–æ –ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π)
  const isBirthdaySoon = (date: string): boolean => {
    const today = new Date();
    const [month, day] = date.split('-');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
    const birthdayThisYear = new Date(
      today.getFullYear(),
      parseInt(month) - 1,
      parseInt(day)
    );
    
    // –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
    if (birthdayThisYear < today) {
      birthdayThisYear.setFullYear(today.getFullYear() + 1);
    }
    
    // –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const diffTime = birthdayThisYear.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays <= 3 && diffDays >= 0;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–µ–≥–æ–¥–Ω—è –ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
  const isBirthdayToday = (date: string): boolean => {
    const today = new Date();
    const [_, month, day] = date.split('-');
    
    return (
      today.getDate() === parseInt(day) &&
      today.getMonth() + 1 === parseInt(month)
    );
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatDate = (dateString: string): string => {
    const [year, month, day] = dateString.split('-');
    return `${day}.${month}.${year}`;
  };

  if (!open) return null;

  return (
    <div className="text-white fixed inset-y-0 right-0 z-50 w-[1000px] bg-background border-l-[3px] border-black shadow-xl flex flex-col h-full overflow-hidden">
      <div className="flex justify-between items-center p-4">
        <h2 className="text-center text-3xl font-bold ">–ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏</h2>
        <Button variant="ghost" size="icon" onClick={() => onOpenChange(false)}>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M18 6L6 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
            <path d="M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
          </svg>
        </Button>
      </div>
      
      <div className="flex-1 overflow-y-auto p-4">
        <div className="grid gap-4">
          <div className="flex items-end gap-4">
            <div className="grid w-full gap-2">
              <Label htmlFor="name">–ò–º—è</Label>
              <Input 
                id="name" 
                value={newName} 
                onChange={(e) => setNewName(e.target.value)}
                className='text-black'
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è" 
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="date">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</Label>
              <Input 
                id="date" 
                type="date" 
                value={newDate}
                className='text-black' 
                onChange={(e) => setNewDate(e.target.value)} 
              />
            </div>
            <Button disabled={newName.length===0 && newDate.length===0} onClick={addBirthday}>
              {editingId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
            </Button>
          </div>
          
          <div className="flex justify-between items-center mt-4">
            <h3 className="text-lg font-semibold">–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è</h3>
            <Button 
              variant="outline" 
              onClick={() => setSortByDate(!sortByDate)}
            >
              –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ {sortByDate ? '–∏–º–µ–Ω–∏' : '–¥–∞—Ç–µ'}
            </Button>
          </div>
          
          <div className="border rounded-md divide-y">
            {sortedBirthdays.length > 0 ? (
              sortedBirthdays.map((birthday) => (
                <div 
                  key={birthday.id} 
                  className="flex justify-between items-center p-3"
                >
                  <div className='text-xl'>
                    <span className="font-bold">{birthday.name}</span>
                    <span className="ml-2">{formatDate(birthday.date)}</span>
                    <span className="ml-2">({calculateAge(birthday.date)})</span>
                    {isBirthdayToday(birthday.date) && (
                      <span className="ml-2 text-orange-500 font-bold">üéÇ</span>
                    )}
                    {!isBirthdayToday(birthday.date) && isBirthdaySoon(birthday.date) && (
                      <span className="ml-2 text-orange-500 font-bold">–°–∫–æ—Ä–æ!</span>
                    )}
                  </div>
                  <div className="flex gap-2">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => editBirthday(birthday)}
                    >
                      –ò–∑–º–µ–Ω–∏—Ç—å
                    </Button>
                    <Button 
                      variant="destructive" 
                      size="sm" 
                      onClick={() => deleteBirthday(birthday.id)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  </div>
                </div>
              ))
            ) : (
              <p className="p-3 text-center">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}