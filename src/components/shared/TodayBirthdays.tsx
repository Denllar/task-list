import React, { useState, useEffect } from 'react';

interface Birthday {
  id: string;
  name: string;
  date: string; // —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD
}

export const TodayBirthdays: React.FC = () => {
  const [todayBirthdays, setTodayBirthdays] = useState<Birthday[]>([]);

  useEffect(() => {
    const checkTodayBirthdays = () => {
      const storedBirthdays = localStorage.getItem('birthday');
      if (!storedBirthdays) return [];
      
      const birthdays: Birthday[] = JSON.parse(storedBirthdays);
      const today = new Date();
      
      return birthdays.filter((birthday) => {
        const [_, month, day] = birthday.date.split('-');
        return (
          today.getDate() === parseInt(day) &&
          today.getMonth() + 1 === parseInt(month)
        );
      });
    };
    
    setTodayBirthdays(checkTodayBirthdays());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    const interval = setInterval(() => {
      setTodayBirthdays(checkTodayBirthdays());
    }, 86400000); // 24 —á–∞—Å–∞
    
    return () => clearInterval(interval);
  }, []);

  // –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞
  const calculateAge = (birthDate: string): number => {
    const today = new Date();
    const [birthYear, birthMonth, birthDay] = birthDate.split('-');
    
    let age = today.getFullYear() - parseInt(birthYear);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É
    const hasBirthdayOccurredThisYear = (
      today.getMonth() + 1 > parseInt(birthMonth) || 
      (today.getMonth() + 1 === parseInt(birthMonth) && today.getDate() >= parseInt(birthDay))
    );
    
    // –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª, –≤—ã—á–∏—Ç–∞–µ–º 1 –≥–æ–¥
    if (!hasBirthdayOccurredThisYear) {
      age--;
    }
    
    return age;
  };

  if (todayBirthdays.length === 0) return null;

  return (
    <div className="bg-orange-500/20 p-3 rounded-md mb-4 text-3xl text-white">
      <div className="flex items-center gap-2">
        <span className="text-2xl">üéÇ</span>
        <span className="font-bold">–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:</span>
        {todayBirthdays.map((birthday, index) => (
          <React.Fragment key={birthday.id}>
            <span className="font-medium">{birthday.name}</span>
            <span className="font-medium"> ({calculateAge(birthday.date)})</span>
            {index < todayBirthdays.length - 1 && <span>,</span>}
          </React.Fragment>
        ))}
      </div>
    </div>
  );
};